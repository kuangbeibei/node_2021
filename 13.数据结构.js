// 目录，树形结构
// html编译，栈型结构，路由管理系统
// 事件环，队列结构，消息队列
// react fiber 链表结构

//  数组的一个缺陷：数组塌陷
// 比如我们在调用write方法的时候，api说明只有第一次write是真正的写入，其他的write都是放在内存中等待前面的写完了，再依次从顶部拿出来。用数组去实现这个方法的的话，就会有性能问题，数组塌陷的问题。（这里我们用的是数组来表示队列：队列是先进先出）
// 所以现在改用链表模拟，链表结构在对头尾的操作上性能较高。因为不存在塌陷问题，只需要改指针即可

// 线性结构：队列、栈、链表（单向、双向链表、单向循环链表、双向循环链表、环形链表）

// 数据结构的功能，一定都有增删改查，都有对数据结构的遍历！
// 遍历有很多种，递归是最容易理解的，也是最常用的。但当数据结构层级太深，或者使用不当，就会爆栈。因为递归的调用栈在代码执行的过程中是始终存在的。递归可以退出，有退出条件。但是递归过程中无法中断。除了递归遍历，还有循环遍历。循环遍历的优势很多，但不是很好实现，需要转变思路。递归的思路是，想清楚第一二层就可以，它的思路是在脑海中串起所有。但是循环遍历，可能借助队列或者栈的方式去循环，则这个思路可能是放进去几个就出来几个，并不是要吧所有的数据都放在队列或者栈中再去循环操作。比如用循环的方式，借助队列或者栈去实现二叉搜索树的层序遍历、前序遍历。
